{{ {

function generateOscCliExamples(data) {
    let s = '';
    let exampleContent = '';
    const apiName = data.host.slice(0, -1);
    const callName = data.operationUniqueName.split('__').slice(-1)[0];

    const examples = Object.entries(data.bodyParameter.exampleValues);
    for (let [key, value] of examples) {
        if (key === 'customExamples') {
            for (let n = 0, length = value.length; n < length; n++) {
                if (value[n]) {
                    if (value[n].summary) {
                        s += '# ' + value[n].summary + '\n\n';
                    }
                    else {
                        for (let security of data.security) {
                            if ('BasicAuth' in security) {
                                s += '# Example with access key/secret key authentication\n\n';
                            }
                        }
                    }
                    s += 'osc-cli ' + data.host.slice(0, -1) + ' ' + callName + ' --profile "default"';
                    exampleContent = getExampleContent(value[n], apiName, callName);
                    s += exampleContent;
                    if (length > 1 && n < length-1) {
                        s += '```\n';
                        s += '```console\n';
                    }
                }
            }
        }
    }
    for (let security of data.security) {
        if ('BasicAuth' in security && (apiName === 'api' || apiName === 'icu')) {
            for (let [key, value] of examples) {
                if (key === 'customExamples') {
                    s += '\n```\n';
                    s += '```console\n';
                    s += '# Example with login/password authentication\n\n';
                    s += 'osc-cli ' + data.host.slice(0, -1) + ' ' + callName;
                    s += ' --profile "default" --authentication-method "password" --login "$OSC_EMAIL" --password "$OSC_PASSWORD"';
                    s += exampleContent;
                }
            }
        }
    }

    return s;
}

function getExampleContent(value, apiName, callName) {
    let s = ' \\\n';
    const objJson = JSON.parse(value.json);
    for (let [k, v] of Object.entries(objJson)) {
        /* Make LBU-style '.member.N' parameters start with N=1 instead of 0 */
        if (k.endsWith('.member.N')) {
            k = k.slice(0, -1) + '1';
        }
        /* Workaround for non-working ICU login/password parameters */
        if (apiName === 'icu' && (k === 'AuthenticationMethod' || k === 'Login' || k === 'Password')) {
            continue;
        }
        s += '  --' + k;
        if (typeof v === 'object') {
            s += ' \'' + getPythonStyleObject(v, 2) + '\' \\\n';
        }
        else if (isNaN(v)) {
            /* Certificate parameter values need a special syntax */
            if (callName === 'CreateCa' && k === 'CaPem') {
                s += '="$(cat ca-certificate.pem)" \\\n';
            }
            else if ( (callName === 'CreateServerCertificate' && k === 'Body')
            || (callName === 'UploadServerCertificate' && k === 'CertificateBody') ) {
                s += '="$(cat certificate.pem)" \\\n';
            }
            else if ( (callName === 'CreateServerCertificate' && k === 'Chain')
            || (callName === 'UploadServerCertificate' && k === 'CertificateChain') ) {
                s += '="$(cat certificate-chain.pem)" \\\n';
            }
            else if ( (callName === 'CreateServerCertificate' && k === 'PrivateKey')
            || (callName === 'UploadServerCertificate' && k === 'PrivateKey') ) {
                s += '="$(cat private-key.pem)" \\\n';
            }
            /* It can be useful to directly encode some parameters to Base64 */
            else if (callName === 'CreateKeypair' && k === 'PublicKey') {
                s += ' "$(base64 -i key_name.pub)" \\\n';
            }
            else if (callName === 'CreateVms' && k === 'UserData') {
                s += ' "$(base64 -i user_data.txt)" \\\n';
            }
            /* EIM policies need to be formatted in a special way */
            else if (callName.includes('Policy') && k === 'Document') {
                v = v.replace(/"/g, '\\\"');
                s += " '\"" + v + "\"' \\\n";
            }
            else {
                s += ' "' + v + '" \\\n';
            }
        }
        else {
            /* In OSC CLI, booleans need to be capitalized like in Python */
            if (v === false || k === 'DryRun' || k === 'dryRun') {v = 'False';}
            else if (v === true) {v = 'True';}
            /* In OSC CLI, strings composed entirely of digits need to be double-quoted */
            else if (!Number.isInteger(v)) {v = "'\"" + v + "\"'";}
            s += ' ' + v + ' \\\n';
        }
    }
    s = s.replace(/, \n/g, ',\n');
    s = s.replace(/,(,|\])/g, '$1');
    s = s.replace(/ \\\n$/, '\n');

    return s;
}

function getPythonStyleObject(objectValue, level) {
    let s = '';
    let first = true;
    let arrayType = false;
    let marging = 2;
    let spaceChar = ' ';
    let addNewLine = false;

    level += 1;

    for (let [k1, v1] of Object.entries(objectValue)) {

        if (first) {
            first = false;
            if (k1 === '0') {
                s = '[';
                arrayType = true;
            } else {
                s = '{';
            }
        }
        if (level < 5 && (!arrayType || typeof v1 === 'object'))
        {
            s += '\n' + spaceChar.repeat(marging * level);
        }
        if (!arrayType) {
            s += '"' + k1 + '": ';
        }
        if (typeof v1 === 'object') {
            s += getPythonStyleObject(v1, level);
            addNewLine = true;
        }
        else if (isNaN(v1)) {
            s += '"' + v1 + '"';
        }
        else {
            if (v1 === false) {v1 = 'False';}
            else if (v1 === true) {v1 = 'True';}
            else if (!Number.isInteger(v1)) {v1 = '"' + v1 + '"';}
            s += v1;
        }
        s += ', ';
    }

    if (level >= 5) {
        s = s.slice(0, -2);
    }
    else {
        s = s.slice(0, -1);
    }

    level -= 1;
    if (arrayType) {
        if (level < 4 && addNewLine) {
            s += '\n' + spaceChar.repeat(marging * level);
        }
        s += ']';
    } else  {
        if (level < 4) {
            s += '\n' + spaceChar.repeat(marging * level);
        }
        s += '}';
    }

    return s;
}

} }}{{= generateOscCliExamples(data)}}
