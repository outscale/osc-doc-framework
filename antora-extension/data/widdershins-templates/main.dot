<!-- Generator: Widdershins v{{=data.widdershins.version}} -->

{{= data.tags.section }}
<h1 id="{{=data.title_prefix}}">{{=data.api.info && data.api.info.title}}{{? data.version}} {{=data.version}}{{?}}</h1>

{{? data.api.info && data.api.info.description}}{{= data.custom.getIntroFirstPart(data.api.info.description) }}{{?}}

{{= data.api.servers }}

{{? data.api.info && data.api.info.termsOfService}}<a href="{{=data.api.info.termsOfService}}">Terms of service</a>.{{?}}
{{? data.api.info && data.api.info.contact}}{{? data.api.info.contact.email}}Email: <a href="mailto:{{=data.api.info.contact.email}}">{{=data.api.info.contact.name || data.api.info.contact.email}}</a>. {{?}}{{? data.api.info.contact.url}}Web: <a href="{{=data.api.info.contact.url}}">{{= data.api.info.contact.name || 'Support'}}</a>. {{?}}{{?}}
{{? data.api.info && data.api.info.license}}{{? data.api.info.license.url}}License: <a href="{{=data.api.info.license.url}}">{{=data.api.info.license.name}}</a>.{{??}} License: {{=data.api.info.license.name}}.{{?}}{{?}}
{{= data.tags.endSection }}

{{? data.api.components && data.api.components.securitySchemes }}

{{ const secondPartofIntro = data.custom.getIntroSecondPart(data.api.info.description); }}
{{? secondPartofIntro !== null }}{{=secondPartofIntro}}
{{?? secondPartofIntro === null }}{{#def.security}}{{?}}

{{?}}

{{ for (const r in data.resources) { }}
{{ data.resource = data.resources[r]; }}

{{= data.tags.section }}
<h1 id="{{=data.title_prefix+'-'+data.utils.slugify(r)}}">{{= r}}</h1>

{{? data.resource.description }}{{= data.resource.description}}{{?}}

{{ for (const m in data.resource.methods) { }}
{{ data.operationUniqueName = m; }}
{{ data.method = data.resource.methods[m]; }}
{{ data.operationUniqueSlug = data.method.slug; }}
{{ data.operation = data.method.operation; }}
{{= data.templates.operation(data) }}
{{ } /* of methods */ }}

{{= data.tags.endSection }}
{{ } /* of resources */ }}

{{? data.api.components && data.api.components.schemas }}
{{= data.tags.section }}

# Schemas

{{ for (const s in data.components.schemas) { }}
{{ let origSchema = data.components.schemas[s]; }}
{{ const schema = data.api.components.schemas[s]; }}

{{= data.tags.section }}
<h2 id="tocS_{{=s}}">{{=s}}</h2>
<a class="offset-up" id="schema{{=s.toLowerCase()}}"></a>
<a class="offset-up" id="tocs{{=s.toLowerCase()}}"></a>

{{ const blocks = data.custom.schemaToArray(origSchema,-1,{trim:true,join:true},data); }}

{{~ blocks :block}}

{{? block===blocks[0] }}
{{= data.tags.section }}
{{?}}

{{? block.externalDocs}}[{{= block.externalDocs.description || data.translations.externalDocs}}](block.externalDocs.url){{?}}

{{? (block.rows.length === 1 && block.rows[0].name === '*anonymous*') }}

{{? (block.title && block.title !== s && block.title !== block.rows[0].description) }}
{{= block.title}}{{= '\n\n'}}
{{?}}

|Type|Description|
|---|---|
{{~ block.rows :p}}|{{= data.custom.printType(p) }}|{{= data.custom.printDescription(p, data.host) }}|
{{~}}

{{?? block.rows.length }}

{{? (block.title && block.title !== s && block.title !== block.rows[0].description) }}
{{= block.title}}{{= '\n\n'}}
{{?}}

|Property|Type|Description|
|---|---|---|
{{~ block.rows :p}}|{{= data.custom.printParameterName(p.displayName) }}{{= data.custom.getDeprecateState(p.description) }}|{{= data.custom.printType(p) }}|{{= data.custom.printDescription(p, data.host) }}|
{{~}}

> Schema
{{? data.options.yaml }}
```yaml
{{=data.utils.yaml.stringify(data.utils.getSample(schema,data.options,{quiet:true},data.api))}}{{??}}
```json
{{=data.utils.safejson(data.utils.getSample(schema,data.options,{quiet:true},data.api),null,2)}}{{?}}
```
{{~}}

{{?}}

{{= data.tags.endSection }}

{{ } /* of schemas */ }}

{{?}}

{{? data.options.discovery}}
{{#def.discovery}}
{{?}}
