{{ {

function concatenateSomeParameterOneOfs(parameters) {
    for (var i = 0, length = parameters.length; i < length; i++) {
        let types = [];
        const formats = [];
        const p = parameters[i];
        const itemsOneOf = p.schema.items?.oneOf;
        const oneOf = p.schema.oneOf;
        if (itemsOneOf) {
            let k = 0;
            while (itemsOneOf[k]) {
                types.push(itemsOneOf[k].type);
                formats.push(itemsOneOf[k].format);
                k++;
            }
        }
        if (oneOf) {
            let k = i + 1;
            while (parameters[k] && parameters[k].depth === p.depth + 1) {
                types.push(parameters[k].schema.type);
                formats.push(parameters[k].schema.format);
                k++;
            }
        }
        if (itemsOneOf || oneOf) {
            types = [...new Set(types)];
            if (types.length === 1) {
                p.safeType = types + ' (' + formats.join(' or ') + ')';
                if (itemsOneOf) {
                    p.safeType = '[' + p.safeType + ']';
                }
                k = i + 1;
                while (parameters[k] && p && parameters[k].depth === p.depth + 1) {
                    parameters[k]._temp = 'parameter_to_remove';
                    k++;
                }
            }
        }
    }
    parameters = parameters.filter( (n) => {return '_temp' in n === false} );
    return parameters;
}
data.parameters = concatenateSomeParameterOneOfs(data.parameters);

function formatRequired(boolean) {
    if (boolean) {
        return ' <mark>(required)</mark>';
    }
    else {
        return '';
    }
}

function cleanType(type) {
    type = type.replace(/\b\(/, ' (');
    type = type.replace(/\)\(/, ') (');
    type = type.replace('Â¦null', '');
    return type;
}

function cleanParameterDescription(description) {
    if (description) return description.replace(/\n/g, '');
    else return '';
}

function printEnum(p) {
    let s = '';
    if (p.schema.enum) {
        s += '<br />Possible values: `' + p.schema.enum.join('`, `') + '`.';
    }
    return s;
}

function printPattern(p) {
    let s = p.schema.items?.pattern || p.schema.pattern || '';
    if (s) {
        s = s.replace(/\|/g, '\\|');
        s = '<br /><span>Pattern: `' + s + '`</span>';
    }
    return s;
}

} }}

{{= data.tags.section }}
<h3 id="{{=data.operationUniqueSlug}}-parameters">Available Parameters</h3>

|Name|Type|Description|
|---|---|---|
{{~ data.parameters :p}}|{{=p.name}}{{= formatRequired(p.required) }}|{{= cleanType(p.safeType) }}|{{= cleanParameterDescription(p.description) }}{{= printPattern(p) }}|
{{~}}

{{= data.tags.endSection }}
